

var normaliseLayer = function(layer) {
	var currentPage = currentDocument.currentPage()

  var existingRotation = [layer rotation]
  [layer setRotation: 0]

	var layer_copy = [layer duplicate]
	[layer_copy removeFromParent]
	[currentPage addLayers: [layer_copy]]

	var frame = [layer_copy frame]
	[frame setX: [[layer absoluteRect] x]]
	[frame setY: [[layer absoluteRect] y]]

	[layer_copy setRotation: 0]
	[[[layer_copy style] contextSettings] setOpacity:(1.0)]
	[layer_copy setIsVisible:true]

  [layer setRotation: existingRotation]
	return layer_copy
}


var getAbsolutePlaceImage = function(layer) {
	if (layer == nil) { return [100, 100, 0, 0] }
	var normalisedLayer = normaliseLayer(layer)
	var temp = MSSliceTrimming.trimmedRectForLayerAncestry(MSImmutableLayerAncestry.ancestryWithMSLayer(normalisedLayer))
	var values = [temp.size.width, temp.size.height, temp.origin.x, temp.origin.y]

	[normalisedLayer removeFromParent]
	return values
}


var getAbsolutePlaceRect = function(layer) {
	if (layer == nil) { return nil }
	if (TypeInventory.isPageType([layer className])) { return [0,0,0,0] }

	var normalisedRect = normaliseLayer(layer)
	var values = [[[normalisedRect frame] width], [[normalisedRect frame] height], [[normalisedRect absoluteRect] x], [[normalisedRect absoluteRect] y]]

	[normalisedRect removeFromParent]
	return values
}


var getAbsolutePlaceArtboard = function(artboard) {
		// log("?inside " + [artboard className] + " " + [artboard name])
		// log(TypeInventory.isArtboardType(artboard))
		if (artboard == nil) { return nil }

		return [[[artboard frame] width], [[artboard frame] height], artboard.rulerBase().x.integerValue(), artboard.rulerBase().y.integerValue()]
}










var getPlace = function(layer) {
	log(layer.name())
	if (layer == nil) { return [0, 0, 0, 0] }
	// if (TypeInventory.isArtboardType(layer)) { return getAbsolutePlaceRect(layer) }

	var currentPage = currentDocument.currentPage()

	var layerValues = getAbsolutePlaceRect(layer)
	var parentValues = getAbsolutePlaceArtboard(TypeInventory.findParentArtboard(layer))

	var resultValues = [layerValues[0], layerValues[1], layerValues[2] - parentValues[2], layerValues[3] - parentValues[3]]

	// log(TypeInventory.findParentArtboard(layer))
	// log(parentValues)
	// log(layerValues)

	return resultValues
}
