@import 'type-inventory.cocoascript'
@import 'get-place.cocoascript'
@import 'get-corners.cocoascript'


var currentDocument = nil

var onRun = function(context) {

  currentDocument = context.document
  var page = [currentDocument currentPage]
  var pageLayers = [page layers]

  log("######## STARTED")

  for (var i = 0; i < pageLayers.count(); i++) {
      var currentLayer = [pageLayers objectAtIndex:i]
      scanCurrentLevel(currentLayer)
  }

  [currentDocument showMessage:"done"]
}



var scanCurrentLevel = function(layer) {

  var levelData = {
    name: "",
    typeName: "",
    typeNumber: -1,
    position: [],

    currentLevelLayers: 0,
    allLevelLayers: 0,

    cornerRadius: -1,
    shapeTypeNumber: -1,
    insideShapeLayers: 0


  }

  levelData.name = layer.name()
  levelData.typeName = layer.className()
  levelData.typeNumber = TypeInventory.returnTypeNumber(layer)
  levelData.position = getPlace(layer)


  if (TypeInventory.isShapeGroupType(levelData.typeName)) {
      levelData.shapeTypeNumber = TypeInventory.getShapeTypeNumber(layer)
      levelData.insideShapeLayers = TypeInventory.returnInsideLayersNumber(layer)

      if (levelData.shapeTypeNumber == 0) {
        levelData.cornerRadius = getCornerRadius(layer)
      }
  }


  if (TypeInventory.isGroupType(levelData.typeName) || TypeInventory.isArtboardType(levelData.typeName)) {

    var currentLevelArray = layer.layers()
    levelData.currentLevelLayers = currentLevelArray.count()
    levelData.allLevelLayers = levelData.currentLevelLayers

    for (var i = 0; i < currentLevelArray.count(); i++) {
        var childLevelData = scanCurrentLevel([currentLevelArray objectAtIndex: i])
        levelData.allLevelLayers += childLevelData.allLevelLayers
        // log("Got " + childLevelData.currentLevelLayers + " layers from " + childLevelData.name)
    }

  }



  // toString

  // log(levelData.name + ": c: " + levelData.currentLevelLayers + ", a: " + levelData.allLevelLayers)
  // log(levelData.name + ": shapeType: " + levelData.shapeTypeNumber + ", insideL: " + levelData.insideShapeLayers)
  // log(levelData.name + ": rad: " + levelData.cornerRadius)


  return levelData
}
