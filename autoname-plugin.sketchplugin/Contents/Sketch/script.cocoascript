@import 'type-inventory.cocoascript'
@import 'get-place.cocoascript'
@import 'get-corners.cocoascript'
@import 'logger.js'


var currentDocument = nil
var leaningVectorFile = ""
var leaningVectorFileLines = 0

var onRun = function(context) {

  currentDocument = context.document
  var page = [currentDocument currentPage]
  var pageLayers = [page layers]

  log("######## STARTED")

  var topDeepLevel = -1

  for (var i = 0; i < pageLayers.count(); i++) {
      var currentLayer = [pageLayers objectAtIndex:i]
      currentLayerTypeNumber = TypeInventory.returnParentTypeNumber([currentLayer parentGroup])

      scanCurrentLevel(currentLayer, topDeepLevel, currentLayerTypeNumber)
  }

  var exportPath = "/Users/tilllur/Desktop/leaningInput.txt"
  writeTextToFile(leaningVectorFile, exportPath)

  var learnFileDoneMessage = "Done " + leaningVectorFileLines + " lines"
  [currentDocument showMessage:learnFileDoneMessage]
}


var scanCurrentLevel = function(layer, parentDeepLevel, parentTypeNumber) {

  var levelData = {
    name: "",
    typeName: "",

    typeNumber: -1,
    parentTypeNumber: -1,
    position: [],

    currentLevelLayers: 0,
    allLevelLayers: 0,
    currentDeepLevel: -1,

    cornerRadius: -1,
    shapeTypeNumber: -1,
    insideShapeLayers: 0

  }

  levelData.name = layer.name()
  levelData.typeName = layer.className()
  levelData.typeNumber = TypeInventory.returnTypeNumber(layer)
  levelData.currentDeepLevel = ++parentDeepLevel
  levelData.parentTypeNumber = parentTypeNumber

  levelData.position = getPlace(layer)



  if (TypeInventory.isShapeGroupType(levelData.typeName)) {
      levelData.shapeTypeNumber = TypeInventory.getShapeTypeNumber(layer)
      levelData.insideShapeLayers = TypeInventory.returnInsideLayersNumber(layer)

      if (levelData.shapeTypeNumber == 0) {
        levelData.cornerRadius = getCornerRadius(layer)
      }
  }


  if (TypeInventory.isLayerGroup(levelData.typeName) || TypeInventory.isArtboardType(levelData.typeName)) {

    var currentLevelArray = layer.layers()
    var parentTypeNumberForCurrentLevel = TypeInventory.returnParentTypeNumber(layer)
    levelData.currentLevelLayers = currentLevelArray.count()
    levelData.allLevelLayers = levelData.currentLevelLayers

    for (var i = 0; i < currentLevelArray.count(); i++) {
        var currentChildLayer = [currentLevelArray objectAtIndex: i]
        var childLevelData = scanCurrentLevel(currentChildLayer, levelData.currentDeepLevel, parentTypeNumberForCurrentLevel)
        levelData.allLevelLayers += childLevelData.allLevelLayers
        // log("Got " + childLevelData.currentLevelLayers + " layers from " + childLevelData.name)
    }

  }



  // toString

  // log(levelData.name + ": p: " + levelData.position)
  // log(levelData.name + ": c: " + levelData.currentLevelLayers + ", a: " + levelData.allLevelLayers)
  // log(levelData.name + ": shapeType: " + levelData.shapeTypeNumber + ", insideL: " + levelData.insideShapeLayers)
  // log(levelData.name + ": rad: " + levelData.cornerRadius)
  // log(levelData.name + ": lvl: " + levelData.currentDeepLevel)
  // log(levelData.name + ": pT: " + levelData.parentTypeNumber)

  createLearnVector(levelData)

  return levelData
}



var dSep = function() { return ", " }
var ln = function() { return "\n" }

var createLearnVector = function(currentData) {
    var currentLayerData = ""

    for (i in currentData.position) { currentLayerData += currentData.position[i] + dSep() }
    currentLayerData += currentData.currentLevelLayers + dSep()
    currentLayerData += currentData.allLevelLayers + dSep()
    currentLayerData += currentData.typeNumber + dSep()
    currentLayerData += currentData.shapeTypeNumber + dSep()
    currentLayerData += currentData.insideShapeLayers + dSep()
    currentLayerData += currentData.cornerRadius + dSep()
    currentLayerData += currentData.currentDeepLevel + dSep()
    currentLayerData += currentData.parentTypeNumber + dSep()

    currentLayerData += currentData.name

    leaningVectorFileLines++
    leaningVectorFile += currentLayerData + ln()
}
